import org.junit.jupiter.api.Test;

import static org.fest.assertions.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertThrows;

/**
 * Created by USER on 2017-01-28.
 */
class PercolationIsOpenTest {
    @org.junit.jupiter.api.BeforeEach
    void setUp() {

    }

/*
    @Test
    void shouldThrowExceptionWhenIndexesAreSmallerThanTheRange() {
        //given
        int n = 4;
        final Percolation percolation = new Percolation(n);

        //when

        Throwable exception = assertThrows(IndexOutOfBoundsException.class, () -> {
            percolation.isOpen(0, 3);
        });
    }

    @Test
    void shouldThrowExceptionWhenIndexesAreBiggerThanTheRange() {
        //given
        int n = 4;
        final Percolation percolation = new Percolation(n);

        //when

        Throwable exception = assertThrows(IndexOutOfBoundsException.class, () -> {
            percolation.isOpen(0, n + 1);
        });
    }

    @Test
    void shouldNotThrowExceptionWhenIndexesAreInRange() {
        //given
        int n = 4;
        final Percolation percolation = new Percolation(n);

        //when
        percolation.isOpen(1, n );

        //then
        // no exception
    }


    @Test
    void shouldReturnBlockedSiteIfCellisFalse() {
        //given
        int n = 4;
        final Percolation percolation = new Percolation(n);
        int i =0;
        int j =1;
        percolation.grid[i][j] = false;

        //when
        boolean isOpen = percolation.isOpen(i + 1, j + 1);

        //then
        assertThat(isOpen).isFalse();
    }


    @Test
    void shouldReturnBlockedSiteIfCellisTrue() {
        //given
        int n = 4;
        final Percolation percolation = new Percolation(n);
        int i =2;
        int j =3;
        percolation.grid[i][j] = true;

        //when
        boolean isOpen = percolation.isOpen(i + 1, j + 1);

        //then
        assertThat(isOpen).isTrue();
    }*/
}